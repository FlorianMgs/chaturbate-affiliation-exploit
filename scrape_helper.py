import time
import subprocess
import requests
import re
import csv
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from config import *

def rotate_ip(adb_device):

    print('Rotating IP...')
    adb_device.shell('cmd statusbar expand-settings')
    time.sleep(0.5)
    adb_device.shell('input tap 420 300')
    time.sleep(5)
    adb_device.shell('input tap 420 300')
    time.sleep(1)
    adb_device.shell('input tap 600 300')
    time.sleep(0.5)
    adb_device.shell('input keyevent 3')
    time.sleep(3)

    connect_token = False
    while not connect_token:

        cmd = "netsh wlan connect name={0} ssid={0}".format(PHONE_SSID)
        k = subprocess.run(cmd, capture_output=True, text=True).stdout
        time.sleep(3)
        try:
            ip = requests.get('https://api.ipify.org').text
            print(f'IP address: {ip}')
            break
        except Exception:
            continue



def sleep_script(seconds='normal'):
    if seconds == 'normal':
        time.sleep(4)
        return
    else:
        time.sleep(seconds)
        return


def open_url(browser, url):
    print("Loading " + str(url))
    repeat = False
    while not repeat:
        try:
            browser.get(url)
            sleep_script()
            repeat = True
        except:
            print("Something went wrong loading the requested page, trying again!")
            repeat = False
    print("Page loaded successfully")
    return True


def open_url_dev(browser, url):
    browser.get(url)
    sleep_script()
    return True


def write_to_file(data, filename):
    print("Generating CSV data")
    pin = open(filename, "a+")
    pin.write(data + "\n")
    pin.close()
    print("End of program")


def write_chunk_to_file(data_set, filename):
    with open(filename, 'a+') as f:
        writer = csv.writer(f)
        writer.writerows(data_set)
    print("Write successful!")
    return True


def read_as_soup(browser):
    allHTML = BeautifulSoup(browser.page_source)
    html = allHTML.encode('utf-8')
    return BeautifulSoup(html, 'html.parser')


def login_user(browser, url, username, password):
    print("Opening login page")
    open_url(browser, url)

    ## Click to open the login modal
    browser.find_element(By.CLASS_NAME, 'headerSignIn').click()

    sleep_script(5)
    html = browser.execute_script("document.getElementsByTagName('html')[0].innerHTML")

    ## Fill login form
    browser.execute_script("document.getElementById(\'loginEmail\').value=\'" + username + "\';")
    sleep_script(2)
    browser.execute_script("document.getElementById(\'loginPassword\').value=\'" + password + "\';")
    sleep_script(2)
    ## Submit login form and try logging in
    browser.execute_script("document.getElementById(\'signIn\').click()")
    print("Login attempted")
    sleep_script(12)
    return True

def form_select_option(browser, jQuerySelector, val_to_select):
    script = "jQuery(\"%s\").val(\'%s\');" % (jQuerySelector, val_to_select)
    script += "jQuery(\"" + jQuerySelector + "\").trigger(\'change\');"
    sleep_script()
    browser.execute_script(script)
    sleep_script()
    return True


def execute_script(browser, script):
    browser.execute_script(script)
    sleep_script()
    return True


def form_input_text(browser, selector, val, js=False, index=False):
    if not js:
        browser.find_element_by_id(selector).send_keys(Keys.CONTROL + "a")
        browser.find_element_by_id(selector).send_keys(Keys.BACKSPACE)
        browser.find_element_by_id(selector).send_keys(val)
    else:
        if not index:
            script = "jQuery(document).find(\"" + selector + "\").val(\'" + val + "\');"
            script += "jQuery(document).find(\"" + selector + "\").trigger(\'change\');"
        else:
            script = "jQuery('" + selector + "').eq(\'" + str(index) + "\').val('" + val + "');"
            script += "jQuery('" + selector + "').eq(\'" + str(index) + "\').trigger(\'change\');"
        sleep_script()
        browser.execute_script(script)

    sleep_script()
    return True

def form_select_radio(browser, selector, val):
    script = "jQuery(\"%s\").find(\"label span:contains(\'%s\')\").eq(0).parent().prev().click();" % (selector, val)
    sleep_script()
    browser.execute_script(script)
    sleep_script()
    return True


def form_select_checkbox(browser, selector, js=False, index=False):
    if not js:
        sleep_script()
        browser.find_element_by_id(selector).click()
        sleep_script()
        return True
    if not index:
        script = "jQuery(document).find(\"" + selector + "\").prop('checked', true);"
        script += "jQuery(document).find(\"" + selector + "\").trigger(\'change\');"
    else:
        script = "jQuery('" + selector + "').eq(\'" + str(index) + "\').prop('checked', true);"
        script += "jQuery('" + selector + "').eq(\'" + str(index) + "\').trigger(\'change\');"
    sleep_script()
    browser.execute_script(script)
    return True

def form_button_click(browser, selector):
    sleep_script()
    script = "jQuery(\'" + selector + "\').click()"
    browser.execute_script(script)
    sleep_script()
    return True

def form_upload_file(browser, xpath_selector, file):
    script = "jQuery(\"div.photosWrapper div.grid input[type=\'file\']\").css(\'display\', \'block\')"
    browser.execute_script(script)
    sleep_script()
    browser.find_element(By.XPATH, xpath_selector).send_keys(file)
    sleep_script(30)
    print("File sent for upload")
    return True


def display_notice(type, message):
    print(message)
    return True
