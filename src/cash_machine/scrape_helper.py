"""Scrapper.
"""
import csv
import json
import subprocess

from time import sleep

import requests

from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

from cash_machine.settings import *


def rotate_ip(adb_device):

    print('Rotating IP...')
    adb_device.shell('cmd statusbar expand-settings')
    sleep(0.5)
    adb_device.shell('input tap 420 300')
    sleep(5)
    adb_device.shell('input tap 420 300')
    sleep(1)
    adb_device.shell('input tap 600 300')
    sleep(0.5)
    adb_device.shell('input keyevent 3')
    sleep(3)

    connect_token = False
    while not connect_token:

        cmd = f"netsh wlan connect name={PHONE_SSID} ssid={PHONE_SSID}"
        k = subprocess.run(cmd, capture_output=True, text=True).stdout
        sleep(3)
        try:
            ip = requests.get('https://api.ipify.org').text
            print(f'IP address: {ip}')
            break
        except Exception:
            continue


def get_stats(stats_api_url):

    response = json.loads(requests.get(stats_api_url).text)
    stats = {
        'registrations': response['stats'][0]['totals']["Payout"],
        'hits': response['stats'][0]['totals']["Unique Hits"],
        'CTR': response['stats'][0]['totals']["Payout"] / response['stats'][0]['totals']["Unique Hits"]
    }
    return stats


def open_url(browser, url):
    print(f"Loading {url}")
    repeat = False
    while not repeat:
        try:
            browser.get(url)
            sleep(4)
            repeat = True
        except:
            print("Something went wrong loading the requested page, trying again!")
            repeat = False
    print("Page loaded successfully")
    return True


def open_url_dev(browser, url):
    browser.get(url)
    sleep(4)
    return True


def write_to_file(data, filename):
    print("Generating CSV data")
    pin = open(filename, "a+")
    pin.write(f"{data}\n")
    pin.close()
    print("End of program")


def write_chunk_to_file(data_set, filename):
    with open(filename, 'a+') as f:
        writer = csv.writer(f)
        writer.writerows(data_set)
    print("Write successful!")
    return True


def read_as_soup(browser):
    allHTML = BeautifulSoup(browser.page_source)
    html = allHTML.encode('utf-8')
    return BeautifulSoup(html, 'html.parser')


def login_user(browser, url, username, password):
    print("Opening login page")
    open_url(browser, url)

    # Click to open the login modal
    browser.find_element(By.CLASS_NAME, 'headerSignIn').click()

    sleep(5)
    html = browser.execute_script("document.getElementsByTagName('html')[0].innerHTML")

    # Fill login form
    browser.execute_script(f"document.getElementById(\'loginEmail\').value='{username}';")
    sleep(2)
    browser.execute_script(f"document.getElementById(\'loginPassword\').value='{password}';")
    sleep(2)
    # Submit login form and try logging in
    browser.execute_script("document.getElementById(\'signIn\').click()")
    print("Login attempted")
    sleep(12)
    return True


def form_select_option(browser, jQuerySelector, val_to_select):
    script = f"jQuery('{jQuerySelector}').val('{val_to_select}');"
    script += f"jQuery('{jQuerySelector}').trigger('change');"
    sleep(4)
    browser.execute_script(script)
    sleep(4)
    return True


def execute_script(browser, script):
    browser.execute_script(script)
    sleep(4)
    return True


def form_input_text(browser, selector, val, js=False, index=False):
    if not js:
        browser.find_element_by_id(selector).send_keys(Keys.CONTROL + "a")
        browser.find_element_by_id(selector).send_keys(Keys.BACKSPACE)
        browser.find_element_by_id(selector).send_keys(val)
    else:
        if not index:
            script = f"jQuery(document).find('{selector}').val('{val}');"
            script += f"jQuery(document).find('{selector}').trigger('change');"
        else:
            script = f"jQuery('{selector}').eq('{index}').val('{val}');"
            script += f"jQuery('{selector}').eq('{index}').trigger('change');"
        sleep(4)
        browser.execute_script(script)

    sleep(4)
    return True


def form_select_radio(browser, selector, val):
    script = f"jQuery('{selector}').find(\"label span:contains('{val}')\").eq(0).parent().prev().click();"
    sleep(4)
    browser.execute_script(script)
    sleep(4)
    return True


def form_select_checkbox(browser, selector, js: bool = False, index: bool = False):
    if not js:
        sleep(4)
        browser.find_element_by_id(selector).click()
        sleep(4)
        return True
    if not index:
        script = f"jQuery(document).find('{selector}').prop('checked', true);"
        script += f"jQuery(document).find('{selector}').trigger('change');"
    else:
        script = f"jQuery('{selector}').eq('{index}').prop('checked', true);"
        script += f"jQuery('{selector}').eq('{index}').trigger('change');"
    sleep(4)
    browser.execute_script(script)
    return True


def form_button_click(browser, selector):
    sleep(4)
    script = f"jQuery('{selector}').click()"
    browser.execute_script(script)
    sleep(4)
    return True

def form_upload_file(browser, xpath_selector, file):
    script = "jQuery(\"div.photosWrapper div.grid input[type=\'file\']\").css(\'display\', \'block\')"
    browser.execute_script(script)
    sleep(4)
    browser.find_element(By.XPATH, xpath_selector).send_keys(file)
    sleep(30)
    print("File sent for upload")
    return True


def display_notice(type, message):
    print(message)
    return True
