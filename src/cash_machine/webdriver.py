import time
import logging
import random

import undetected_chromedriver.v2 as uc

from bs4 import BeautifulSoup
from selenium.webdriver.common.proxy import *
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException


from cash_machine.scrape_helper import *


def check_exists_by_xpath(browser, xpath):
    try:
        browser.find_element_by_xpath(xpath)
    except NoSuchElementException:
        return False
    return True


class Driver:

    def get_browser(self):
        return self.browser

    def close_browser(self):
        self.browser.close()
        self.browser = None
        return True

    def log(self, type, data):
        logging.basicConfig(
            filename=self.log_file,
            level=logging.DEBUG,
            format='%(asctime)s %(message)s',
            datefmt='%m/%d/%Y %I:%M:%S %p',
        )
        if type == 'error':
            logging.error(data)
        else:
            logging.info(data)

    def init_browser(self):
        ## Initialize undetectable chrome browser
        browser = uc.Chrome()
        self.browser = browser
        browser.maximize_window()
        return browser

    def __init__(self, proxy=False):
        self.log_file = "../../usage.log"
        self.browser = self.init_browser()

    def is_page_blocked_by_captcha(self):
        try:
            self.browser.find_element_by_id("cf-error-details").find_element_by_xpath('/div/h1[@data-translate=\"challenge_headline\"]')
            return True
        except Exception as e:
            print(e)
            return False

    def is_jQuery_rendered_completely(self):
        try:
            self.execute_script(self.browser, "$ === jQuery")
        except:
            return False
        return True

    def browse_url(self, url):
        browser = self.browser
        print("Loading "+ str(url))
        repeat = False
        while not repeat:
            try:
                browser.get(url)
            except:
                return False
            sleep(90.0/1000.0)
            repeat = True
        print("Page loaded successfully")
        return True

    def read_as_soup(self, browser):
        allHTML = BeautifulSoup(browser.page_source)
        html=allHTML.encode('utf-8')
        return BeautifulSoup(html, 'html.parser')

    def execute_script(self, browser, script):
        browser.execute_script(script)
        sleep(4)
        return True

    def get_site_captcha_key(self):
        try:
            return self.browser.find_element_by_xpath('//div[@class=\"g-recaptcha\"]').get_attribute('data-sitekey')
        except Exception as e:
            return False

    def open_url(self, browser, url):
        print("Loading {url}")
        # time.sleep(30)
        repeat = False
        while not repeat:
            try:
                browser.get(url)
                sleep(90.0/1000.0)
                repeat = True
            except:
                print("Something went wrong loading the requested page, trying again!")
                repeat = False
                sleep(1)
        print("Page loaded successfully")
        return True

    def form_input_text(self, browser, selector, val, js=False, index=False):
        if not js:
            browser.find_element_by_id(selector).send_keys(f"{Keys.CONTROL}a")
            browser.find_element_by_id(selector).send_keys(Keys.BACKSPACE)
            browser.find_element_by_id(selector).send_keys(val)
        else:
            if not index:
                script = f"jQuery(document).find('{selector}').val('{val}');"
                script += f"jQuery(document).find('{selector}').trigger(\'change\');"
            else:
                script = f"jQuery('{selector}').eq('{index}').val('{val}');"
                script += f"jQuery('{selector}').eq('{index}').trigger(\'change\');"
            sleep(90.0/1000.0)
            # print("Executing script"+ script)
            browser.execute_script(script)
        sleep(90.0/1000.0)
        return True

    def form_select_option(self, browser, jQuerySelector, val_to_select):
        """Selecting an option from the supplied select options parent.
            jQuery(".bootstrap-select.beds").find('li a span:contains(1.0)').parent().trigger("click")
        """
        script = f"jQuery('{jQuerySelector}').val('{val_to_select}');"
        script += f"jQuery('{jQuerySelector}').trigger(\'change\');"
        sleep(90.0/1000.0)
        browser.execute_script(script)
        sleep(90.0/1000.0)
        return True

    def form_select_checkbox(self, browser, selector, js=False, index=False):
        """Select checkbox
            jQuery("#hideContact").prop('checked', true)
        """
        if not js:
            sleep(90.0/1000.0)
            # script = "jQuery(\"%s\").prop('checked', true)" % (selector)
            # browser.execute_script(script)
            browser.find_element_by_id(selector).click()
            sleep(90.0/1000.0)
            return True
        if not index:
            script = f"jQuery(document).find('{selector}').prop('checked', true);"
            script += f"jQuery(document).find('{selector}').trigger(\'change\');"
        else:
            script = f"jQuery('{selector}').eq('{index}').prop('checked', true);"
            script += f"jQuery('{selector}').eq('{index}').trigger(\'change\');"
        sleep(90.0/1000.0)
        # print("Executing script"+ script)
        browser.execute_script(script)
        return True

    def execute_script(self, browser, script):
        browser.execute_script(script)
        sleep(90.0/1000.0)
        return True

    def click_submit(self, browser):
        browser.find_element_by_id('formsubmit').click()
        return True

    def click_register(self, browser):
        browser.find_element_by_xpath('//a[text()="INSCRIPTION"]').click()
        return True

    def visit_rooms(self, browser, logged_in=False):
        if browser.current_url != 'https://fr.chaturbate.com/':
            browser.get('https://fr.chaturbate.com/')
            time.sleep(1)
        nb_rooms_to_check = random.randint(1, 8)
        i = 0
        while i < nb_rooms_to_check:
            rooms = browser.find_elements_by_class_name('room_list_room')
            room = random.choice(rooms)
            room.click()
            time.sleep(random.randint(5, 60))
            if logged_in and random.choice([False, True]):
                follow_button = '//div[@class="followButton gradient"]'
                if check_exists_by_xpath(browser, follow_button):
                    browser.find_element_by_xpath(follow_button).click()

            time.sleep(random.randint(1, 15))
            browser.get('https://fr.chaturbate.com/')
            time.sleep(random.randint(2, 10))
            i += 1

        return True