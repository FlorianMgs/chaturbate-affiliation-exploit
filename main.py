from adb_shell.auth.sign_pythonrsa import PythonRSASigner
from adb_shell.adb_device import AdbDeviceUsb
from user_faker import *
from anticaptcha import *
from webdriver import *
from config import *
import time

adbkey = 'adbkey'
with open(adbkey) as f:
    priv = f.read()
with open(adbkey + '.pub') as f:
    pub = f.read()
signer = PythonRSASigner(pub, priv)

my_phone = AdbDeviceUsb()
my_phone.connect(rsa_keys=[signer], auth_timeout_s=0.1)

faker = UserFaker()
data_sets = faker.generate_data(1000)
users = data_sets

with open('usernames.txt', 'w', encoding='utf-8') as f:
    for data in data_sets:
        f.write(json.dumps(data))
        f.write('\n')
i = 0

while i < len(users):

    web = Driver()
    rotate_ip(my_phone)
    if i < 0:
        i = 0
    user = users[i]

    print("Working with user: i=" + str(i))
    print(user)

    AFFLIATE_URL = random.choice(AFFILIATES_URL)

    browser = web.get_browser()

    # Get stats
    current_stats = get_stats(STATS_API)
    CTR = current_stats['CTR']
    print("Money earned: " + current_stats['registrations'] + "\n" + "Visits: " + current_stats['hits'])
    if not CTR <= random.uniform(CTR_MIN, CTR_MAX):
        #CTR too high, visit mode enabled
        print("CTR = " + str(CTR) + "\n" + "CTR too high, entering visits mode")

        #keep-alive: connect to user account or stay anonymous
        with open("done.txt", "r") as f:
            accounts = f.read()
        if accounts is not None:
            if random.choice([True, False]):
                if "\n" in accounts:
                    currentAccount = json.loads(random.choice(accounts.split("\n")))
                else:
                    currentAccount = json.loads(accounts)
                web.browse_url(AFFLIATE_URL)
                time.sleep(randint(2, 10))
                web.login(browser, currentAccount)
                time.sleep(randint(1, 8))
                web.visit_rooms(browser, logged_in=True)
                web.close_browser()
                i += 1
                continue

        #no accounts or choice = False, stay anonymous
        web.browse_url(AFFLIATE_URL)
        time.sleep(randint(5, 45))
        web.visit_rooms(browser, logged_in=False)
        web.close_browser()
        i += 1
        continue

    else:
        #Good CTR, registration mode enabled
        print("CTR = " + str(CTR) + "\n" + "Good CTR, entering registration mode")

        print("Opening affliate url")
        web.browse_url(AFFLIATE_URL)
        time.sleep(randint(2, 15))
        if check_exists_by_xpath(browser, '//a[text()="INSCRIPTION"]'):
            web.click_register(browser)
        else:
            web.close_browser()
            continue

        page_blocked_by_captcha = web.is_page_blocked_by_captcha()
        if page_blocked_by_captcha:
            print(web.is_page_blocked_by_captcha())
            print("Restarting the operation...")
            web.close_browser()
            continue

        ## Working with re-captcha
        captcha_site_key = web.get_site_captcha_key()
        if not captcha_site_key:
            web.close_browser()
            print("Unable to find google captcha key, switching proxy")
            continue

        print("Auto-filling details")
        print("Re-Captcha key")
        print(captcha_site_key)

        api = RecaptchaAPI(captcha_site_key)

        if not web.is_jQuery_rendered_completely():
            print("Page not loaded completely, restarting the operation...")
            web.close_browser()
            continue

        web.form_input_text(browser, "input[name=\'username\']", user['username'], True)
        web.form_input_text(browser, "input[name=\'password\']", user['password'], True)

        dob_set = user['dob'].split('-')
        web.form_select_option(browser, "select[name=\'birthday_month\']", dob_set[0])
        web.form_select_option(browser, "select[name=\'birthday_day\']", dob_set[1])
        web.form_select_option(browser, "select[name=\'birthday_year\']", dob_set[2])

        web.form_select_option(browser, "select[name=\'gender\']", user['gender'])

        web.form_select_checkbox(browser, 'id_terms')
        web.form_select_checkbox(browser, 'id_privacy_policy')

        captcha_solved = api.get_response()
        web.form_input_text(browser, "textarea[id=\'g-recaptcha-response\']", captcha_solved['solution']['gRecaptchaResponse'], True)
        time.sleep(1)
        web.click_submit(browser)
        time.sleep(randint(3, 12))
        print("Registration successful")

        #visit rooms
        web.visit_rooms(browser, logged_in=True)

        time.sleep(randint(1, 10))

        # saving user
        with open("done.txt", "a", encoding="utf-8") as f:
            f.write(json.dumps(user))
            f.write("\n")

        web.close_browser()
        print("Attempting registration...")
        i += 1
